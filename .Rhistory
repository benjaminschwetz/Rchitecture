devtools::load_all()
knitr::opts_chunk$set(
collapse = TRUE,
comment = "#>"
)
library(Rchitecture)
library(purrr)
folder <- system.file("example_data/Zeeguu-Ecosystem/Zeeguu-API/zeeguu_api", package = "Rchitecture")
files <- list.files(folder, recursive = TRUE, full.names = TRUE) %>%
stringr::str_extract(".*\\.py$") %>%
na.omit()
edge_table <- map_df(files, import_from)
folder <- system.file("example_data/Zeeguu-Ecosystem/Zeeguu-API/zeeguu_api", package = Rchitecture)
knitr::opts_chunk$set(
collapse = TRUE,
comment = "#>"
)
library(Rchitecture)
library(purrr)
folder <- system.file("example_data/Zeeguu-Ecosystem/Zeeguu-API/zeeguu_api", package = Rchitecture)
devtools::dev_packages()
folder <- system.file("example_data/Zeeguu-Ecosystem/Zeeguu-API/zeeguu_api", package = Rchitecture)
folder <- system.file("example_data/Zeeguu-Ecosystem/Zeeguu-API/zeeguu_api", package = "Rchitecture")
files <- list.files(folder, recursive = TRUE, full.names = TRUE) %>%
stringr::str_extract(".*\\.py$") %>%
na.omit()
edge_table <- map_df(files, import_from)
devtools::dev_packages()
folder <- system.file("example_data/Zeeguu-Ecosystem/Zeeguu-API/zeeguu_api", package = "Rchitecture")
files <- list.files(folder, recursive = TRUE, full.names = TRUE) %>%
stringr::str_extract(".*\\.py$") %>%
na.omit()
edge_table <- map_df(files, import_from)
reticulate::source_python(system.file("python/python-ast-explorer/parse.py", package ="Rchitecture"))
library(Rchitecture)
folder <- system.file("example_data/Zeeguu-Ecosystem/Zeeguu-API/zeeguu_api", package = "Rchitecture")
files <- list.files(folder, recursive = TRUE, full.names = TRUE) %>%
stringr::str_extract(".*\\.py$") %>%
na.omit()
devtools::load_all()
knitr::opts_chunk$set(
collapse = TRUE,
comment = "#>"
)
library(Rchitecture)
library(purrr)
folder <- system.file("example_data/Zeeguu-Ecosystem/Zeeguu-API/zeeguu_api", package = "Rchitecture")
files <- list.files(folder, recursive = TRUE, full.names = TRUE) %>%
stringr::str_extract(".*\\.py$") %>%
na.omit()
edge_table <- map_df(files, import_from)
rlang::last_error()
devtools::load_all()
folder <- system.file("example_data/Zeeguu-Ecosystem/Zeeguu-API/zeeguu_api", package = "Rchitecture")
files <- list.files(folder, recursive = TRUE, full.names = TRUE) %>%
stringr::str_extract(".*\\.py$") %>%
na.omit()
edge_table <- map_df(files, import_from)
debug(import_from)
edge_table <- map_df(files, import_from)
nn
jsonify_ast(py$tree)
lengt(l_ast)
length(l_ast)
# cleaning up import froms to data frame
tbl_import_from <- l_ast[names(l_ast)=="ImportFrom"] %>% # deps omit points... thank you very much!
purrr::map(~purrr::modify_at(.x, "names",
~ purrr::map_df(.x,
~.x %>%
purrr::flatten() %>%
unlist()))) %>%
purrr::map_df(dplyr::bind_cols)
#n
nrow(tbl_import_from)
length(other_py_scripts)>0
nrow(tbl_import_from)>0 & length(other_py_scripts)>0
edge_table <- map_df(files, import_from)
nn
matchew
matches
matches %>%
filter(!is.na(absolute_paths))
matches %>%
dplyr::filter(!is.na(absolute_paths)) %>%
dplyr::transmute(
soure = path,
target = absolute_paths,
type= "import_from",
directed = "TRUE"
)
devtools::load_all()
folder <- system.file("example_data/Zeeguu-Ecosystem/Zeeguu-API/zeeguu_api", package = "Rchitecture")
files <- list.files(folder, recursive = TRUE, full.names = TRUE) %>%
stringr::str_extract(".*\\.py$") %>%
na.omit()
edge_table <- map_df(files, import_from)
edge_table <- map_df(files, import_from)
devtools::load_all()
library(Rchitecture)
library(purrr)
folder <- system.file("example_data/Zeeguu-Ecosystem/Zeeguu-API/zeeguu_api", package = "Rchitecture")
files <- list.files(folder, recursive = TRUE, full.names = TRUE) %>%
stringr::str_extract(".*\\.py$") %>%
na.omit()
edge_table <- map_df(files, import_from)
debug(import_from)
edge_table <- map_df(files, import_from)
View(tbl_import_from)
path
debug(import_from)
devtools::load_all()
edge_table <- map_df(files, import_from)
safe_import <- purrr::safely(import_from)
edge_table <- map_df(files, safe_import)
edge_table <- map(files, import_from)
View(edge_table)
dplyr::bind_rows(edge_table)
map_df(edge_table, transpose)
edges <- map(files, import_from)
edge_table <- map_df(edges, transpose)
View(edge_table)
node_table <- tibble::tibble(
id = unique(c(edge_table$soure, edge_table$target)),
label= stringr::str_remove(id, "folder"),
folder = folder#
)
View(node_table)
folder
node_table <- tibble::tibble(
id = unique(c(edge_table$soure, edge_table$target)),
label= stringr::str_remove(id, folder),
folder = folder#
)
View(node_table)
node_table <- tibble::tibble(
id = unique(c(edge_table$soure, edge_table$target)),
label= stringr::str_remove(id, paste0(folder, "/")),
folder = folder#
)
library(tidygraph)
?tidygraph::as_tbl_graph()
devtools::load_all()
edges <- map(files, import_from)
edge_table <- map_df(edges, transpose)
node_table <- tibble::tibble(
id = unique(c(edge_table$soure, edge_table$target)),
label= stringr::str_remove(id, paste0(folder, "/")),
folder = folder#
)
node_table <- tibble::tibble(
id = unique(c(edge_table$soure, edge_table$target)),
label= stringr::str_remove(id, paste0(folder, "/")),
folder = folder#
)
edge_table
node_table <- tibble::tibble(
id = unique(c(edge_table$soure, edge_table$target))
)
node_table <- tibble::tibble(
id = unique(c(edge_table$to, edge_table$from)),
label= stringr::str_remove(id, paste0(folder, "/")),
folder = folder#
)
graph <- as_tbl_graph(
nodes = node_table,
edges = edge_table
)
graph <- tbl_graph(
nodes = node_table,
edges = edge_table
)
graph
library(ggraph)
ggraph(graph)+
geom_edge_arc()
ggraph(graph)+
geom_edge_link()
ggraph(graph)+
geom_edge_link()+
geom_node_label()
ggraph(graph)+
geom_edge_link()+
geom_node_label(aes(label = label))
ggraph(graph, layout = "fr")+
geom_edge_link()+
geom_node_label(aes(label = label))
ggraph(graph, layout = "fr")+
geom_edge_arrow()+
geom_node_label(aes(label = label))
ggraph(graph, layout = "fr")+
geom_edge_elbow(arrow = TRUE)+
geom_node_label(aes(label = label))
?geom_edge_elbow
ggraph(graph, layout = "fr")+
geom_edge_elbow(arrow = arrow())+
geom_node_label(aes(label = label))
folder <- system.file("example_data/Zeeguu-Ecosystem/Zeeguu-API/zeeguu_core", package = "Rchitecture")
files <- list.files(folder, recursive = TRUE, full.names = TRUE) %>%
stringr::str_extract(".*\\.py$") %>%
na.omit()
edges <- map(files, import_from)
edges <- map(files, import_from)
edge_table <- map_df(edges, transpose)
node_table <- tibble::tibble(
id = unique(c(edge_table$to, edge_table$from)),
label= stringr::str_remove(id, paste0(folder, "/")),
folder = folder#
)
graph <- tbl_graph(
nodes = node_table,
edges = edge_table
)
graph
ggraph(graph, layout = "fr")+
geom_edge_elbow(arrow = arrow())+
geom_node_label(aes(label = label))
ggraph(graph, layout = "fr")+
geom_edge_diagonal(arrow = arrow())+
geom_node_label(aes(label = label))
?tidygraph::morph()
?tidygraph::to_components()
library(dplyr)
library(stringr)
folder <- system.file("example_data/Zeeguu-Ecosystem/Zeeguu-API/zeeguu_core", package = "Rchitecture")
files <- list.files(folder, recursive = TRUE, full.names = TRUE) %>%
stringr::str_extract(".*\\.py$") %>%
na.omit()
edges <- map(files, import_from)
edge_table <- map_df(edges, transpose)
node_table <- tibble::tibble(
id = unique(c(edge_table$to, edge_table$from)),
label= str_remove(id, paste0(folder, "/")),
folder = folder,
subfolder = str_remove(label, "[^/]+$")
) %>%
mutate_at(vars(-id),
~str_replace_all("/+", "/")
)
node_table <- tibble::tibble(
id = unique(c(edge_table$to, edge_table$from)),
label= str_remove(id, paste0(folder, "/")),
folder = folder,
subfolder = str_remove(label, "[^/]+$")
) %>%
mutate_at(vars(-id),
~str_replace_all(.x, "/+", "/")
)
View(node_table)
graph <- tbl_graph(
nodes = node_table,
edges = edge_table
)
graph %>%
activate("nodes") %>%
morph(to_components)
tidygraph::group_components()
?tidygraph::group_components()
graph %>%
activate("nodes") %>%
mutate(graph_component = group_components)
graph %>%
activate("nodes") %>%
mutate(graph_component = group_components())
graph <- tbl_graph(
nodes = node_table,
edges = edge_table
) %>%
activate("nodes") %>%
mutate(graph_component = group_components()) # numeric for connected components
as_tibble(graph)
as_tibble(graph) %>% group_by(graph_componen) %>% summarise(n_distinct(subfolder))
as_tibble(graph) %>% group_by(graph_component) %>% summarise(n_distinct(subfolder))
library(ggraph)
ggraph(graph) +
geom_edge_density() +
geom_node_circle(aes(fill = subfolder))
ggraph(graph) +
geom_edge_density()
ggraph(graph) +
geom_edge_density() +
geom_node_circle()
ggraph(graph) +
geom_edge_density() +
geom_node_point()
?ggraph
ggraph(graph, layout = "partition") +
geom_edge_density() +
geom_node_point()
ggraph(graph, layout = "dendrogram") +
geom_edge_density() +
geom_node_point()
ggraph(graph, layout = "igraph", algorithm = "fr") +
geom_edge_density() +
geom_node_point()
ggraph(graph, layout = "igraph", algorithm = "fr") +
geom_edge_density() +
geom_node_point(aes(color = subfolder))
ggraph(graph, layout = "igraph", algorithm = "fr") +
geom_edge_density() +
geom_node_point(aes(color = subfolder)) +
scale_color_brewer()
ggraph(graph, layout = "igraph", algorithm = "fr") +
geom_edge_density() +
geom_node_point(aes(color = subfolder)) +
scale_color_brewer(type = "div")
ggraph(graph, layout = "igraph", algorithm = "fr") +
geom_edge_density() +
geom_node_point(aes(color = subfolder)) +
scale_color_brewer(type = "qual")
ggraph(graph, layout = "igraph", algorithm = "fr") +
geom_edge_density() +
geom_node_point(aes(color = subfolder)) +
scale_color_brewer(type = "qual") +
theme_minimal()
ggraph(graph, layout = "igraph", algorithm = "fr") +
geom_edge_density() +
geom_node_point(aes(color = subfolder)) +
scale_color_brewer(type = "qual") +
theme_void()
?geom_edge_density
ggraph(graph, layout = "igraph", algorithm = "fr") +
geom_edge_diagonal() +
geom_node_point(aes(color = subfolder)) +
scale_color_brewer(type = "qual") +
theme_void()
ast_list(f)
devtools::load_all()
ast_list("inst/python/python-ast-explorer/parse.py")
ast_list("inst/python/python-ast-explorer/parse.py") %>% unlist()
ast_list("inst/python/python-ast-explorer/parse.py") %>% unlist() %>% unname()
?quanteda::tokens()
quanteda::tokenize_character("skjnfbadgog")
quanteda::tokenize_character(c("skjnfbadgog", "wautioawgh"))
devtools::load_all()
tokenize_ast("inst/example_data/Zeeguu-Ecosystem/Zeeguu-API/zeeguu_core/language/strategies/flesch_kincaid_difficulty_estimator.py")
tokenize_ast("inst/example_data/Zeeguu-Ecosystem/Zeeguu-API/zeeguu_core/language/strategies/flesch_kincaid_difficulty_estimator.py") %>% str()
quanteda::tokenize_character(c("skjnfbadgog", "wautioawgh"))
quanteda::tokenize_character(c("skjnfbadgog", "wautioawgh")) %>% str()
tokenize_ast("inst/example_data/Zeeguu-Ecosystem/Zeeguu-API/zeeguu_core/language/strategies/flesch_kincaid_difficulty_estimator.py") %>% quanteda::tokens()
devtools::load_all()
tokenize_ast("inst/example_data/Zeeguu-Ecosystem/Zeeguu-API/zeeguu_core/language/strategies/flesch_kincaid_difficulty_estimator.py") %>% quanteda::tokens()
tokenize_ast("inst/example_data/Zeeguu-Ecosystem/Zeeguu-API/zeeguu_core/language/strategies/flesch_kincaid_difficulty_estimator.py") %>% quanteda::tokens() %>% quanteda::dfm_tfidf()
tokenize_ast("inst/example_data/Zeeguu-Ecosystem/Zeeguu-API/zeeguu_core/language/strategies/flesch_kincaid_difficulty_estimator.py") %>% quanteda::tokens() %>% quanteda::dfm() %>%  quanteda::dfm_tfidf()
tokenize_ast("inst/example_data/Zeeguu-Ecosystem/Zeeguu-API/zeeguu_core/language/strategies/flesch_kincaid_difficulty_estimator.py") %>% quanteda::tokens() %>% quanteda::dfm() %>%  quanteda::dfm_tfidf() %>% View()
?quanteda::dfm_tfidf
usethis::use_vignette("text_mining_ast")
library(Rchitecture)
library(quanteda)
folder <- system.file("example_data/Zeeguu-Ecosystem/Zeeguu-API/zeeguu_core", package = "Rchitecture")
files <- extract_py_script_files(folder)
folder <- system.file("example_data/Zeeguu-Ecosystem/Zeeguu-API/zeeguu_core", package = "Rchitecture")
files <- extract_py_script_paths(folder)
devtools::load_all()
folder <- system.file("example_data/Zeeguu-Ecosystem/Zeeguu-API/zeeguu_core", package = "Rchitecture")
files <- extract_py_script_paths(folder)
df_mat <- tokenize_ast(files) %>%
tokens() %>%
dfm()
library(Rchitecture)
devtools::load_all()
knitr::opts_chunk$set(
collapse = TRUE,
comment = "#>"
)
library(Rchitecture)
library(quanteda)
folder <- system.file("example_data/Zeeguu-Ecosystem/Zeeguu-API/zeeguu_core", package = "Rchitecture")
files <- extract_py_script_paths(folder)
df_mat <- tokenize_ast(files) %>%
tokens() %>%
dfm()
tokenize_ast(files)
devtools::load_all()
df_mat <- tokenize_ast(files) %>%
tokens() %>%
dfm()
topfeatures(df_mat)
df_mat %>% dfm_tfidf()
df_mat %>% dfm_tfidf() %>% topfeatures()
install.packages(c("quanteda.textplots", "quanteda.textmodels", "quanteda.textstats"))
quanteda.textplots::textplot_wordcloud(df_mat)
quanteda.textplots::textplot_keyness()
quanteda.textplots::textplot_keyness(df_mat)
quanteda.textplots::textplot_xray(df_mat)
quanteda.textplots::textplot_network(df_mat)
?quanteda.textplots::textplot_network(df_mat)
quanteda.textplots::textplot_network(df_mat, min_freq = 1)
usethis::use_vignette("zeeguu_api")
install.packages("git2r")
?git2r::clone()
library(Rchitecture)
temp_folder <- tempdir()
git2r::clone(url = "https://github.com/zeeguu-ecosystem/Zeeguu-API.git",
folder = temp_folder)
temp_folder <- tempdir()
git2r::clone(url = "https://github.com/zeeguu-ecosystem/Zeeguu-API.git",
local_path  = temp_folder)
temp_folder
dir(temp_folder)
temp_folder <- tempdir()
dir(temp_folder)
temp_folder
local_path  = paste0(temp_folder, "/zeeguu_api")
dir(temp_folder)
temp_folder <- tempdir()
git2r::clone(url = "https://github.com/zeeguu-ecosystem/Zeeguu-API.git",
local_path  = paste0(temp_folder, "/zeeguu_api")
temp_folder <- tempdir()
git2r::clone(url = "https://github.com/zeeguu-ecosystem/Zeeguu-API.git",
local_path  = paste0(temp_folder, "/zeeguu_api"))
zeeguu_path <- paste0(temp_folder, "/zeeguu_api")
content_table(zeeguu_path)
devtools::load_all()
folder_contents <- content_table(zeeguu_path, include_folders = FALSE)
library(dplyr)
folder_contents %>%
group_by(file_type) %>%
summarise(
n_files = n_distinct(file_name),
file_size_sum = sum(size, na.rm = TRUE)
file_size_mean = mean(size),
folder_contents %>%
group_by(file_type) %>%
summarise(
n_files = n_distinct(file_name),
file_size_sum = sum(size, na.rm = TRUE)
file_size_mean = mean(size),
folder_contents %>%
group_by(file_type) %>%
summarise(
n_files = n_distinct(file_name),
file_size_sum = sum(size, na.rm = TRUE),
file_size_mean = mean(size),
file_size_median = median(size),
file_size_min = min(size, na.rm = TRUE),
file_size_max = max(size, na.rm = TRUE)
)
library(Rchitecture)
library(tidyverse)
?fct_infreq
f <- factor(c("b", "b", "a", "c", "c", "c"))
f
fct_inorder(f)
fct_infreq()
fct_infreq(f)
folder_contents %>%
mutate(
file_type = fct_infreq(file_type)
) %>%
group_by(file_type) %>%
summarise(
n_files = n_distinct(file_name),
file_size_sum = sum(size, na.rm = TRUE),
file_size_mean = mean(size),
file_size_median = median(size),
file_size_min = min(size, na.rm = TRUE),
file_size_max = max(size, na.rm = TRUE)
)
folder_contents %>%
mutate(
file_type = fct_infreq(file_type)
) %>%
group_by(file_type) %>%
summarise(
n_files = n_distinct(file_name),
file_size_sum = sum(size, na.rm = TRUE),
file_size_mean = mean(size),
file_size_median = median(size),
file_size_min = min(size, na.rm = TRUE),
file_size_max = max(size, na.rm = TRUE)
) %>%
mutate_if(is.numeric,round)
install.packages("data.tree")
library(Rchitecture)
library(tidyverse)
library(data.tree)
folder_tree <- data.tree::as.Node(data.frame(pathString = zeeguu_path))
folder_tree
plot(folder_tree)
install.packages("DiagrammeR")
plot(folder_tree)
?data.tree::as.Node
folder_tree <- data.tree::as.Node(data.frame(pathString = list.files(zeeguu_path)))
plot(folder_tree)
list.files(zeeguu_path)
folder_tree <- data.tree::as.Node(data.frame(pathString = list.files(zeeguu_path, recursive = TRUE)))
plot(folder_tree)
folder_tree <- data.tree::as.Node(data.frame(pathString = list.dirs(zeeguu_path, recursive = TRUE)))
plot(folder_tree)
usethis::use_readme_rmd()
git status
usethis::use_pkgdown_github_pages()
usethis::use_github()
?usethis::use_github()
usethis::use_github(protocol = "ssh")
usethis::use_git_config(user.name = "Benjamin Schwetz", user.email = "bensc@itu.dk")
usethis::use_git_config(user.name = "Benjamin Schwetz", user.email = "benjaminschwetz@posteo.net")
gitcreds::gitcreds_set()
usethis::use_pkgdown_github_pages()
usethis::use_git()
usethis::use_github()
usethis::git_sitrep()
usethis::github_token()
https://docs.ropensci.org/credentials/reference/set_github_pat.html
credentials::set_github_pat()
https://rdrr.io/pkg/gitcreds/man/gitcreds_get.html
gitcreds::gitcreds_set()
usethis::git_sitrep()
usethis::create_github_token()
gitcreds::gitcreds_set()
install.packages(c("BiocManager", "boot", "brio", "broom", "callr", "class", "cli", "cluster", "colorspace", "cpp11", "curl", "dbplyr", "devtools", "dplyr", "DT", "ellipsis", "formatR", "gert", "gh", "haven", "highr", "httpuv", "jquerylib", "KernSmooth", "knitr", "later", "lattice", "MASS", "Matrix", "mgcv", "nnet", "openssl", "parallelly", "pillar", "pkgload", "processx", "proxyC", "quanteda.textstats", "R.cache", "RcppArmadillo", "RcppParallel", "remotes", "reprex", "reticulate", "rlang", "rmarkdown", "RPostgres", "sass", "spatial", "stringi", "survival", "tibble", "tidyselect", "tidytext", "tidyverse", "tinytex", "vctrs", "withr"))
install.packages(c("BiocManager", "boot", "brio", "broom", "callr", "class", "cli", "cluster", "colorspace", "cpp11", "curl", "dbplyr", "devtools", "dplyr", "DT", "ellipsis", "formatR", "gert", "gh", "haven", "highr", "httpuv", "jquerylib", "KernSmooth", "knitr", "later", "lattice", "MASS", "Matrix", "mgcv", "nnet", "openssl", "parallelly", "pillar", "pkgload", "processx", "proxyC", "quanteda.textstats", "R.cache", "RcppArmadillo", "RcppParallel", "remotes", "reprex", "reticulate", "rlang", "rmarkdown", "RPostgres", "sass", "spatial", "stringi", "survival", "tibble", "tidyselect", "tidytext", "tidyverse", "tinytex", "vctrs", "withr"))
