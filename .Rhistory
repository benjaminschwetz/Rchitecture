usethis::use_mit_license()
devtools
usethis::use_package("reticulate")
dir(system.file("inst/example_data/Zeeguu-Ecosystem/"))
dir(system.file("example_data/Zeeguu-Ecosystem/"))
devtools::load_all()
dir(system.file("example_data/Zeeguu-Ecosystem/"), package="Rchitecture")
?system.file
dir(system.file("example_data/Zeeguu-Ecosystem/", package="Rchitecture"))
?dir
file.info(system.file("example_data/Zeeguu-Ecosystem/", package="Rchitecture"))
file.info(list.files("example_data/Zeeguu-Ecosystem/", package="Rchitecture"))
View(file.info(list.files(system.file("example_data/Zeeguu-Ecosystem/", package="Rchitecture"))))
file.info(list.files(system.file("example_data/Zeeguu-Ecosystem/", package="Rchitecture")))
list.files(system.file("example_data/Zeeguu-Ecosystem/", package="Rchitecture"))
file.info(list.files(system.file("example_data/Zeeguu-Ecosystem/", package="Rchitecture"), recursive = TRUE))
View(file.info(list.files(system.file("example_data/Zeeguu-Ecosystem/", package="Rchitecture"), recursive = TRUE)))
View(file.info(system.file("example_data/Zeeguu-Ecosystem/", package="Rchitecture", recursive = TRUE))
View(file.info(system.file("example_data/Zeeguu-Ecosystem/", package="Rchitecture", recursive = TRUE))
)
View(file.info(system.file("example_data/Zeeguu-Ecosystem/", package="Rchitecture", recursive = TRUE))
)
file.info(system.file("example_data/Zeeguu-Ecosystem/", package="Rchitecture", recursive = TRUE))
system.file("example_data/Zeeguu-Ecosystem/", package="Rchitecture", recursive = TRUE)
system.file("example_data/Zeeguu-Ecosystem/", package="Rchitecture")
View(file.info(list.files(system.file("example_data/Zeeguu-Ecosystem/", package="Rchitecture"), recursive = TRUE, full.names = TRUE)))
?system.file
list.files(".")
list.files(".", full.names = )
list.files(".", full.names = "TRUE")
list.files(".", full.names = TRUE)
dir(".")
?list.files
devtools::load_all()
summarise_content()
stringr::str_match()
?stringr::str_match()
c(stringr::regex("[a-z]+", ignore_case = TRUE), "oo")
stringr::str_match("Foo", c(stringr::regex("[a-z]+", ignore_case = TRUE), "oo"))
stringr::str_match("Foo", list(stringr::regex("[a-z]+", ignore_case = TRUE), "oo"))
list(stringr::regex("[a-z]+", ignore_case = TRUE), "oo")
stringr::regex("[a-z]+", ignore_case = TRUE)
stringr::str_match("Foo", list(quote(stringr::regex("[a-z]+", ignore_case = TRUE)), "oo"))
stringr::str_match("Foo", list(quote(stringr::regex("[a-z]+", ignore_case = TRUE)), "oo"))
devtools::load_all()
summarise_content()
usethis::use_pipe()
devtools::load_all()
summarise_content()
devtools::load_all()
summarise_content()
devtools::load_all()
summarise_content()
devtools::document()
devtools::load_all()
summarise_content()
devtools::load_all()
summarise_content()
devtools::load_all()
summarise_content()
?na.omit
devtools::load_all()
summarise_content() %>% View()
devtools::load_all()
summarise_content() %>% View()
devtools::load_all()
summarise_content() %>% View()
devtools::load_all()
summarise_content() %>% View()
devtools::load_all()
summarise_content() %>% View()
devtools::load_all()
devtools::load_all()
summarise_content() %>% View()
devtools::load_all()
summarise_content() %>% View()
devtools::load_all()
summarise_content() %>% View()
?list.files
devtools::load_all()
content_table()
content_table() %>% View()
devtools::load_all()
content_table() %>% View()
devtools::load_all()
content_table() %>% View()
devtools::load_all()
devtools::document()
devtools::load_all()
ast("NAMESPACE")
devtools::load_all()
ast("NAMESPACE")
devtools::load_all()
ast("NAMESPACE")
devtools::load_all()
ast("NAMESPACE")
devtools::load_all()
ast("inst/example_data/Zeeguu-Ecosystem/Zeeguu-API/setup.py")
debug(ast)
ast("inst/example_data/Zeeguu-Ecosystem/Zeeguu-API/setup.py")
ast <- reticulate::import("ast")
tree <- ast$parse(script)
devtools::load_all()
devtools::load_all()
ast("inst/example_data/Zeeguu-Ecosystem/Zeeguu-API/setup.py")
x=ast("inst/example_data/Zeeguu-Ecosystem/Zeeguu-API/setup.py")
x[7]
x[7][[1]]
reticulate::py_to_r(x[7][[1]])
debug(ast)
ast("inst/example_data/Zeeguu-Ecosystem/Zeeguu-API/setup.py")
tree$body
